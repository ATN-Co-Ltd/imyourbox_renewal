// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const DetailOrderInfos = sequelize.define('detailOrderInfos', {
    seq: {
      type: DataTypes.BIGINT,
      primaryKey: true,
      allowNull: false,
    },
    customerCompany: {
      type: DataTypes.STRING,
      field: 'customer_company',
    },
    customerManagerName: {
      type: DataTypes.STRING,
      field: 'customer_manager_name',
    },
    customerPhone: {
      type: DataTypes.STRING,
      field: 'customer_phone',
    },
    customerEmail: {
      type: DataTypes.STRING,
      field: 'customer_email',
    },
    customerMemo: {
      type: DataTypes.STRING,
      field: 'customer_memo',
    },
    detailProductType: {
      type: DataTypes.STRING,
      field: 'detail_product_type',
    },
    barcodeHave: {
      type: DataTypes.ENUM('have_barcode','no_barcode','part_barcode'),
      field: 'barcode_have',
      allowNull: false,
    },
    productUrl: {
      type: DataTypes.STRING,
      field: 'product_url',
    },
    serviceLaunchingStatus: {
      type: DataTypes.INTEGER,
      field: 'service_launching_status',
      defaultValue: 0,
    },
    inputStoreType: {
      type: DataTypes.ENUM('pallet','box'),
      field: 'input_store_type',
      allowNull: false,
    },
    inputBoxSize: {
      type: DataTypes.ENUM('mini','smaill','medium','large','giant'),
      field: 'input_box_size',
    },
    inputStoreNum: {
      type: DataTypes.INTEGER,
      field: 'input_store_num',
      defaultValue: 0,
      allowNull: false,
    },
    inputSkuStoreNum: {
      type: DataTypes.INTEGER,
      field: 'input_sku_store_num',
      defaultValue: 0,
      allowNull: false,
    },
    inputStoreDate: {
      type: DataTypes.DATE,
      field: 'input_store_date',
    },
    outputDeliveryBoxSize: {
      type: DataTypes.ENUM('mini','smaill','medium','large','giant'),
      field: 'output_delivery_box_size',
      allowNull: false,
    },
    outputDeliveryBoxAmount: {
      type: DataTypes.INTEGER,
      field: 'output_delivery_box_amount',
      defaultValue: 0,
      allowNull: false,
    },
    useService: {
      type: DataTypes.ENUM('first','using'),
      field: 'use_service',
      defaultValue: "first",
      allowNull: false,
    },
    outputPackaing: {
      type: DataTypes.ENUM('total_packaing','only_packaing'),
      field: 'output_packaing',
      defaultValue: "total_packaing",
      allowNull: false,
    },
    courierBag: {
      type: DataTypes.ENUM('have','none','need'),
      field: 'courier_bag',
      allowNull: false,
    },
    processingNeed: {
      type: DataTypes.ENUM('need','not_need'),
      field: 'processing_need',
      allowNull: false,
    },
    regDate: {
      type: DataTypes.DATE,
      field: 'reg_date',
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'detail_order_infos',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  DetailOrderInfos.associate = (models) => {
    DetailOrderInfos.hasMany(models.logisticsServiceKinds, {
      foreignKey: {
        name: 'detailOrderInfoSeqKey',
        field: 'DetailOrderInfoSeq',
      },
      as: 'detailOrderInfoSeqLogisticsServiceKinds',
    });
    DetailOrderInfos.hasMany(models.productCategorys, {
      foreignKey: {
        name: 'detailOrderInfoSeqKey',
        field: 'DetailOrderInfoSeq',
      },
      as: 'detailOrderInfoSeqProductCategorys',
    });
    DetailOrderInfos.hasMany(models.productionCautions, {
      foreignKey: {
        name: 'detailOrderInfoSeqKey',
        field: 'DetailOrderInfoSeq',
      },
      as: 'detailOrderInfoSeqProductionCautions',
    });
    DetailOrderInfos.hasMany(models.storeTypes, {
      foreignKey: {
        name: 'detailOrderInfoSeqKey',
        field: 'DetailOrderInfoSeq',
      },
      as: 'detailOrderInfoSeqStoreTypes',
    });
  };

  return DetailOrderInfos;
};
